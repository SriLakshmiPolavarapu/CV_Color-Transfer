# -*- coding: utf-8 -*-
"""color_transfer.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I9wBeo4QqBtzBKKnqPOpWDNHX9NKuOHp
"""

# SRI LAKSHMI POLAVARAPU
# PSU ID: 914559661

# 1. BGR to RGB
# 2. RGB to LAB
# 3. RGB to CIECAM97
# 4. RMSE

import numpy
from PIL import Image
from sklearn.metrics import mean_squared_error
import cv2
from sklearn.metrics import mean_squared_error
from skimage import exposure, color

def transfer_color(source_file, target_file, rescale=True):
    #-------------------------------------- BGR to RGB ---------------------------------------------
    #BGR to RGB
    def _bgr2rgb(array):
      assert len(array.shape) == 3 and array.shape[2] == 3, \
      'Input array needs to be a BGR image.'
      RGB = array[:, :, ::-1]
      return RGB

    #RGB to BGR
    def _rgb2bgr(array):
        assert len(array.shape) == 3 and array.shape[2] == 3, \
        'Input array needs to be a RGB image.'
        BGR = array[:, :, ::-1]
        return BGR

    # read images as RGB
    source_rgb = cv2.imread(source_file)
    source_rgb = _bgr2rgb(source_rgb)
    target_rgb = cv2.imread(target_file)
    target_rgb = _bgr2rgb(target_rgb)

    #-------------------------------------- RGB to LAB ---------------------------------------------
    # convert RGB to LAB
    source_lab = _rgb2lab(source_rgb)
    target_lab = _rgb2lab(target_rgb)

    # calculate mean and standard deviation of LAB images
    source_mu, source_sigma = _imstats(source_lab)
    target_mu, target_sigma = _imstats(target_lab)

    source_sigma = numpy.where(source_sigma == 0,
                               numpy.ones_like(source_sigma, numpy.float32)*1e-4,
                               source_sigma)
    target_sigma = numpy.where(target_sigma == 0,
                               numpy.ones_like(target_sigma, numpy.float32)*1e-4,
                               target_sigma)
    target_lab -= target_mu
    target_lab *= (target_sigma / source_sigma)
    target_lab += source_mu

    # convert LAB to RGB
    result_rgb = _lab2rgb(target_lab)
    if rescale:
        result_rgb = numpy.uint8(_rescale(result_rgb))
    else:
        result_rgb = numpy.uint8(result_rgb)

    return result_rgb


    #---------------------RGB to LAB------------------------------#

# convert RGB to LAB color space
def _rgb2lab(array):

    assert len(array.shape) == 3 and array.shape[2] == 3, \
           'Input array needs to be a RGB image.'

    # Define transformation matrices
    T1_RGB2LMS = numpy.float32([[0.3811, 0.5783, 0.0402],
                             [0.1967, 0.7244, 0.0782],
                             [0.0241, 0.1288, 0.8444]])
    T2_LMS2LAB = numpy.float32([[1., 1., 1.],
                             [1., 1., -2.],
                             [1., -1., 0.]])
    T3_LMS2LAB = numpy.float32([[1./numpy.sqrt(3.), 0., 0.],
                             [0., 1./numpy.sqrt(6.), 0.],
                             [0., 0., 1./numpy.sqrt(2.)]])

    RGB = numpy.float32(array).reshape(-1, 3).T
    LMS = numpy.matmul(T1_RGB2LMS, RGB)

    epsilon = 1e-4
    LMS = numpy.where(LMS == 0, epsilon, LMS)
    LMS = numpy.log10(LMS)

    # Convert LMS to LAB
    LAB = numpy.matmul(T3_LMS2LAB, numpy.matmul(T2_LMS2LAB, LMS))
    return LAB.T.reshape(array.shape[0], array.shape[1], 3)


    print("LMS (before log):", LMS)
    print("LAB (before reshaping):", LAB)

    return LAB.T.reshape(array.shape[0], array.shape[1], 3)

# convert LAB to RGB color space
def _lab2rgb(array):
    assert len(array.shape) == 3 and array.shape[2] == 3, \
    'Input array needs to be a LAB image.'

    T1_LAB2LMS = numpy.float32([[numpy.sqrt(3)/3., 0., 0.],
                                [0., numpy.sqrt(6)/6., 0.],
                                [0., 0., numpy.sqrt(2)/2.]])
    T2_LAB2LMS = numpy.float32([[1., 1., 1.],
                                [1., 1., -1.],
                                [1., -2., 0.]])
    T3_LMS2RGB = numpy.float32([[4.4679, -3.5873, 0.1193],
                                [-1.2186, 2.3809, -0.1624],
                                [0.0497, -0.2439, 1.2045]])

    LAB = numpy.float32(array).reshape(-1, 3).T

    # convert LAB to LMS
    LMS = numpy.matmul(T2_LAB2LMS, numpy.matmul(T1_LAB2LMS, LAB))
    LMS = 10. ** LMS
    # convert LMS to RGB
    RGB = numpy.matmul(T3_LMS2RGB, LMS)
    RGB = RGB.T.reshape(array.shape[0], array.shape[1], 3)
    return RGB

    #-------------------------------------- RGB to CIECAM97 ---------------------------------------------

def _rgb2ciecam(array):
        T_RGB2XYZ = numpy.array([[0.5141, 0.3239, 0.1604],
                                 [0.2651, 0.6702, 0.0641],
                                 [0.0241, 0.1228, 0.8444]])
        T_XYZ2RGB = numpy.linalg.inv(T_RGB2XYZ)
        T_XYZ2CAM = numpy.array([[2.00, 1.00, 0.05],
                                  [1.00, -1.09, 0.09],
                                  [0.11, 0.11, -0.22]])
        T_CAM2XYZ = numpy.linalg.inv(T_XYZ2CAM)

        # Convert RGB to XYZ
        XYZ = numpy.matmul(array.reshape(-1, 3), T_RGB2XYZ.T)
        # Convert XYZ to CIECAM
        CAM = numpy.matmul(XYZ, T_XYZ2CAM.T)
        return CAM.reshape(array.shape)

    # convert CIECAM to RGB color space
def _ciecam2rgb(array):
        T_CAM2XYZ = numpy.array([[2.00, 1.00, 0.05],
                                  [1.00, -1.09, 0.09],
                                  [0.11, 0.11, -0.22]])
        T_XYZ2CAM = numpy.linalg.inv(T_CAM2XYZ)
        T_XYZ2RGB = numpy.array([[0.5141, 0.3239, 0.1604],
                                 [0.2651, 0.6702, 0.0641],
                                 [0.0241, 0.1228, 0.8444]])

        # Convert CIECAM to XYZ
        XYZ = numpy.matmul(array.reshape(-1, 3), T_XYZ2CAM.T)
        # Convert XYZ to RGB
        RGB = numpy.matmul(XYZ, T_XYZ2RGB.T)
        return numpy.clip(RGB.reshape(array.shape), 0, 255)

def _imstats(image):
    image = numpy.float32(image).reshape(-1, 3).T
    # calculate mean
    mu = numpy.mean(image, axis=1, keepdims=False)
    # calculate standard deviation
    sigma = numpy.std(image, axis=1, keepdims=False)
    return (mu, sigma)

def _rescale(image):
    image = numpy.float32(image)
    image = 255. * (image - image.min()) / (image.max() - image.min())
    return image


def transfer_color_lab(source_file, target_file, rescale=True):


    # Read source image as RGB
    source_rgb = Image.open(source_file).convert('RGB')

    # Convert source image to LAB color space
    source_lab = _rgb2lab(numpy.float32(numpy.array(source_rgb)))

    # Read target image as RGB
    target_rgb = Image.open(target_file).convert('RGB')

    # Convert target image to LAB color space
    target_lab = _rgb2lab(numpy.float32(numpy.array(target_rgb)))


    source_mu, source_sigma = _imstats(source_lab)
    target_mu, target_sigma = _imstats(target_lab)

    source_sigma = numpy.where(source_sigma == 0,
                               numpy.ones_like(source_sigma, numpy.float32)*1e-4,
                               source_sigma)
    target_sigma = numpy.where(target_sigma == 0,
                               numpy.ones_like(target_sigma, numpy.float32)*1e-4,
                               target_sigma)

    source_lab -= source_mu
    source_lab *= (target_sigma / source_sigma)
    source_lab += target_mu

    # Convert LAB to RGB
    result_rgb = _lab2rgb(source_lab)
    if rescale:
        result_rgb = numpy.uint8(_rescale(result_rgb))
    else:
        result_rgb = numpy.uint8(result_rgb)
    result_rgb = Image.fromarray(result_rgb)

    return result_rgb

def transfer_color_ciecam(source_file, target_file, rescale=True):
    # Read source image as RGB
    source_rgb = Image.open(source_file).convert('RGB')

    # Convert source image to CIECAM97 color space
    source_ciecam = _rgb2ciecam(numpy.array(source_rgb))

    # Read target image as RGB
    target_rgb = Image.open(target_file).convert('RGB')

    # Convert target image to CIECAM97 color space
    target_ciecam = _rgb2ciecam(numpy.array(target_rgb))

    result_ciecam = source_ciecam

    # Convert the transferred image back to RGB
    result_rgb = _ciecam2rgb(result_ciecam)

    if rescale:
        result_rgb = numpy.uint8(_rescale(result_rgb))
    else:
        result_rgb = numpy.uint8(result_rgb)
    result_rgb = Image.fromarray(result_rgb)

    return result_rgb

def transfer_color_rgb(source_file, target_file, rescale=True):
    # Read source image as RGB
    source_rgb = Image.open(source_file).convert('RGB')

    # Read target image as RGB
    target_rgb = Image.open(target_file).convert('RGB')

    result_rgb = source_rgb

    return result_rgb

# Perform color transfer using LAB option
image_lab = transfer_color_lab("/content/source2.png","/content/target2.png")

# Convert the PIL image to a byte array
image_lab_bytes = numpy.array(image_lab)
image_lab_bytes = cv2.cvtColor(image_lab_bytes, cv2.COLOR_RGB2BGR)

# Save the transferred image to disk (LAB)
cv2.imwrite("/content/result_in_Lab.png", image_lab_bytes)

# Perform color transfer using CIECAM97 option
image_ciecam = transfer_color_ciecam("/content/source2.png", "/content/target2.png")

# Convert the PIL image to a byte array
image_ciecam_bytes = numpy.array(image_ciecam)
image_ciecam_bytes = cv2.cvtColor(image_ciecam_bytes, cv2.COLOR_RGB2BGR)

# Save the transferred image to disk (CIECAM97)
cv2.imwrite("/content/result_in_CIECAM97.png", image_ciecam_bytes)

# Perform color transfer using RGB option
image_rgb = transfer_color_rgb("/content/source2.png", "/content/target2.png")

# Convert the PIL image to a byte array
image_rgb_bytes = numpy.array(image_rgb)
image_rgb_bytes = cv2.cvtColor(image_rgb_bytes, cv2.COLOR_RGB2BGR)

# Save the transferred image to disk (RGB)
cv2.imwrite("/content/result_in_RGB.png", image_rgb_bytes)

#RMSE
source_img = numpy.array(Image.open("/content/source2.png"))
source_img_rgb = source_img[:, :, :3]
source_img = numpy.array(Image.fromarray(source_img_rgb).resize(image_lab.size))
lab_image = color.rgb2gray(numpy.array(image_lab))
ciecam_image = color.rgb2gray(numpy.array(image_ciecam))
rgb_image = color.rgb2gray(numpy.array(image_rgb))
original_target = color.rgb2gray(source_img)
#RMSE for LAB
rmse_lab = round(numpy.sqrt(((original_target - lab_image) ** 2).mean()),2)
print("RMSE for LAB:", rmse_lab)

#RMSE for CIECAM97
rmse_ciecam = round(numpy.sqrt(((original_target - ciecam_image) ** 2).mean()),2)
print("RMSE for CIECAM97:", rmse_ciecam)

#RMSE for RGB
rmse_rgb = round(numpy.sqrt(((original_target - rgb_image) ** 2).mean()),2)
print("RMSE for RGB:", rmse_rgb)